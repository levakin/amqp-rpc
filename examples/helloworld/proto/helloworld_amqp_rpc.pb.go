// Code generated by protoc-gen-go-amqp-rpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-amqp-rpc v0.1.0
// - protoc             v3.15.8
// source: examples/helloworld/proto/helloworld.proto

package proto

import (
	context "context"
	codes "github.com/levakin/amqp-rpc/v0/codes"
	rpc "github.com/levakin/amqp-rpc/v0/rpc"
	status "github.com/levakin/amqp-rpc/v0/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// GreeterClient is the client API for Greeter service.
//
type GreeterClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest) (*HelloReply, error)
	ReturnErr(ctx context.Context, in *ReturnErrRequest) (*emptypb.Empty, error)
}

type greeterClient struct {
	cc rpc.ClientConnInterface
}

func NewGreeterClient(cc rpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/helloworld.Greeter/SayHello", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) ReturnErr(ctx context.Context, in *ReturnErrRequest) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/helloworld.Greeter/ReturnErr", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	ReturnErr(context.Context, *ReturnErrRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGreeterServer) ReturnErr(context.Context, *ReturnErrRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnErr not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s rpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_ReturnErr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor rpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnErrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).ReturnErr(ctx, in)
	}
	info := &rpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/ReturnErr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).ReturnErr(ctx, req.(*ReturnErrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Greeter_ServiceDesc is the rpc.ServiceDesc for Greeter service.
// It's only intended for direct use with rpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = rpc.ServiceDesc{
	ServiceName: "helloworld.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []rpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
		{
			MethodName: "ReturnErr",
			Handler:    _Greeter_ReturnErr_Handler,
		},
	},
	Metadata: "examples/helloworld/proto/helloworld.proto",
}
